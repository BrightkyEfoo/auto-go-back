name: Déploiement sur le VPS

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  APP_NAME: 'AUTOGO'
  PROJECT_PATH: '~/apps/backend'
  REPO: https://github.com/BrightkyEfoo/auto-go-back
  BRANCH: 'master'

jobs:
  setup_project_directory:
    runs-on: ubuntu-latest
    steps:
      - name: Vérifier et créer le dossier du projet
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            if [ ! -d "${{ env.PROJECT_PATH }}" ]; then
              mkdir -p ${{ env.PROJECT_PATH }}
            fi

  update_repository:
    runs-on: ubuntu-latest
    needs: setup_project_directory
    steps:
      - name: Cloner ou mettre à jour le dépôt
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ${{ env.PROJECT_PATH }}
            if [ ! -d ".git" ]; then
              echo "Cloning the repository ${{ env.REPO }} ... in ${{ env.PROJECT_PATH }}" 
              git clone -b ${{ env.BRANCH }} ${{ env.REPO }} .
            else
              git pull origin ${{ env.BRANCH }}
            fi

  deploy_application:
    runs-on: ubuntu-latest
    needs: update_repository
    steps:
      - name: Déployer l'application avec PM2
        uses: appleboy/ssh-action@v1.2.1
        # env:
        #   CLIENT_ID: ${{ secrets.CLIENT_ID }}
        #   CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        #   CALLBACK_URL: ${{ secrets.CALLBACK_URL }}
        #   DB_NAME: ${{ secrets.DB_NAME }}
        #   DB_USER: ${{ secrets.DB_USER }}
        #   DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        #   DB_HOST: ${{ secrets.DB_HOST }}
        #   DB_PORT: ${{ secrets.DB_PORT }}
        #   APP_NAME: ${{ env.APP_NAME }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: CLIENT_ID, CLIENT_SECRET, CALLBACK_URL, DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT, APP_NAME
          script: |
            cd ${{ env.PROJECT_PATH }}
            # Écrire le fichier .env
            cat > .env <<EOL
            # Google OAuth
            clientID=${{ secrets.CLIENT_ID }}
            clientSecret=${{ secrets.CLIENT_SECRET }}
            callbackURL=${{ secrets.CALLBACK_URL }}

            # Database
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}

            # Nom de l'application
            APP_NAME=${{ env.APP_NAME }}
            EOL

            echo "hello"

            npm install

            if pm2 list | grep "${{ env.APP_NAME }}"; then
              pm2 reload ecosystem.config.js --only ${{ env.APP_NAME }}
            else
              pm2 start ecosystem.config.js --only ${{ env.APP_NAME }}
            fi
